function Format(num: number) :: string:
	if mod({_num}, 1) = 0:
		return "%{_num}%.0"
	else:
		return "%{_num}%"

function WhatGem(i: item) :: string:
	if name of {_i} contains "<##FE8120>&lғɪʀᴇ":
		return "fire"
	else if name of {_i} contains "<##5ED7FF>&lғʟᴜx":
		return "flux"
	else if name of {_i} contains "<##F10103>&lsᴛʀᴇɴɢᴛʜ":
		return "strength"
	else if name of {_i} contains "<##FE04B4>&lʟɪғᴇ":
		return "life"
	else if name of {_i} contains "<##FEFD17>&lsᴘᴇᴇᴅ":
		return "speed"
	else if name of {_i} contains "<##EFEFEF>&lᴘᴜғғ":
		return "puff"
	else if name of {_i} contains "<##0EC912>&lᴡᴇᴀʟᴛʜ":
		return "wealth"
	else if name of {_i} contains "<##A01FFF>&lᴀsᴛʀᴀ":
		return "astra"

function energyboom1001(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 5
    loop 25 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:         
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:    
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.3 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
            


        if {-fluxShootingBeam::%{_p}'s uuid%} is true:        
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.3 to {_superfkux}
            
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 2 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 3 sonic_boom at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}
                
            wait 1 tick

function energyboom10011(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 6
    loop 25 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:         
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:    
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.3 from {_superfkux}
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
            wait 1 tick
            


        if {-fluxShootingBeam::%{_p}'s uuid%} is true:        
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.3 to {_superfkux}
            
            wait 1 tick
            
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 2 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 8
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}
                
            wait 1 tick          

function energyboom100111(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 10
    loop 25 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.4 from {_superfkux}
            

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}
            
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
            
            
            wait 1 tick
            
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.3 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 12
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
                
            wait 1 tick

function energyboom1001111(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 12
    loop 25 times:

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
            
            
            wait 1 tick
            
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}

            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.3 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}

            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.3 from {_superfkux}
            
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.4 from {_superfkux}

            wait 1 tick       

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 3 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 60 # Set a larger step value here
                set {_iterations} to 6
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} + 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            
            wait 1 tick

function energyboom10011111(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 14
    loop 40 times:

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
            
            
            wait 1 tick
            
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.2 to {_superfkux}

            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.3 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:
            

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.1 to {_superfkux}
                
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}

            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.3 from {_superfkux}
            
            wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.3 from {_superfkux}

            wait 1 tick       

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:   
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 45 # Set a larger step value here
                set {_iterations} to 10
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} - 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            
            wait 1 tick

function energyboom312(loc: location, p: player):  # DUST 200 BEAM
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 120 times:
        loop all entities in radius 5 of {_fluxloc}:
            if loop-entity is not {_p}:
                #damage loop-entity by {-fluxKinetic::%{_p}'s uuid%} percent of loop-entity's health
                damage loop-entity by 200 percent of loop-entity's health
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 40 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 4) at {_fluxloc} with offset vector(2 ,2 ,2) with extra 0.000000001 with force
        
        add 1.1 to {_fluxn}

function energyboom313(loc: location, p: player): # END ROD 200 BEAM
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 440 times:

        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 3 of end_rod at {_fluxloc} with extra 0.03 with force
        
        add 0.3 to {_fluxn}
        loop all players in radius 5 of {_fluxloc}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    set {-damaged::%loop-player's uuid%} to true
                    #set {_p} to {_p} parsed as attacker
                    set {-fluxKiller} to {_p}
                    damage loop-player by 1000000000000 hearts
					#if you survive, add the goddamn cooldown here

    wait 2 seconds
    loop {_dontdmgagain::*}:
        delete {-fluxKiller}
        set {-damaged::%loop-value's uuid%} to false

function energyboom609(loc: location, p: player): # END ROD FOR 45-55% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    
    loop 50 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 60 # Set a larger step value here
        set {_iterations} to 6
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.01 to {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 50 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false

function energyboom609999(loc: location, p: player): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

        add 0.8 to {_fluxn}
        add 0.08 to {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true
					

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.05 from {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true
        

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.08 to {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.05 from {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.08 to {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.05 from {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.08 to {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.05 from {_superfkux}
        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true


    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false

function energyboom607(loc: location, p: player): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20

    loop 80 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 60 # Set a larger step value here
        set {_iterations} to 6
        add 1 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with offset vector(0.1,0.1,0.1) with extra 0.000000001 with force
 
        add 0.2 to {_fluxn}
        add 0.03 to {_superfkux}

        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false






function energyboom6077(loc: location): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    
    loop 20 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 6 # Set a larger step value here
        set {_iterations} to 60
        add 1 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector({_supervectoirvalue} ,{_supervectoirvalue} ,{_supervectoirvalue}) with extra 0.000000001 with force
 
        add 0.2 to {_fluxn}
        add 0.04 to {_superfkux}

    loop 20 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 6 # Set a larger step value here
        set {_iterations} to 60
        add 1 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector({_supervectoirvalue} ,{_supervectoirvalue} ,{_supervectoirvalue}) with extra 0.000000001 with force
 
        add 0.2 to {_fluxn}
        add 0.04 to {_superfkux}

    loop 20 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 6 # Set a larger step value here
        set {_iterations} to 60
        add 1 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector({_supervectoirvalue} ,{_supervectoirvalue} ,{_supervectoirvalue}) with extra 0.000000001 with force
 
        add 0.2 to {_fluxn}
        add 0.04 to {_superfkux}
    wait 1 tick

    loop 20 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 6 # Set a larger step value here
        set {_iterations} to 60
        add 1 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector({_supervectoirvalue} ,{_supervectoirvalue} ,{_supervectoirvalue}) with extra 0.000000001 with force
 
        add 0.2 to {_fluxn}
        add 0.04 to {_superfkux}
                
function energyboom654(loc: location, p: player): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to a random number between 1 and 60
    
    loop 25 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 30 # Set a larger step value here
        set {_iterations} to 12
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force
 
        add 0.4 to {_fluxn}
        add 0.07 to {_superfkux}

        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false

function energyboom65444(loc: location, p: player): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to a random number between 1 and 60
    
    loop 20 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 90 # Set a larger step value here
        set {_iterations} to 4
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with offset vector(0.1,0.1,0.1) with extra 0.000000001 with force
 
        add 0.4 to {_fluxn}
        add 0.07 to {_superfkux}

        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false

function energyboom659(loc: location, p: player): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to a random number between 1 and 60
    
    loop 20 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with offset vector(0.1,0.1,0.1) with extra 0.000000001 with force
 
        add 0.4 to {_fluxn}
        add 0.07 to {_superfkux}

        loop all players in radius 3 of {_pl} ~ {_v}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 30 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false


function energyboom651(loc: location, p: player): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to a random number between 1 and 60
    
    loop 12 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 1 end_rod at {_pl} ~ {_v} with offset vector(0.1,0.1,0.1) with extra 0.000000001 with force
 
        add 0.4 to {_fluxn}
        add 0.22 to {_superfkux}

    loop all entities in radius 3 of {_fluxloc}: 
        if loop-entity is not {_p}:
            damage loop-entity by 0.000001 hearts
            if loop-entity's held item is not totem of undying:
                if loop-entity's offhand item is not totem of undying:
                    set loop-entity's health to loop-entity's health - 2
                else:
                    if loop-entity's health > 2:
                        set loop-entity's health to loop-entity's health - 2
                    else if loop-entity's health is less than or equal to 2:
                        set loop-entity's health to loop-entity's health - loop-entity's health + 0.1
                        damage loop-entity by 500 hearts
            else:
                if loop-entity's health > 2:
                    set loop-entity's health to loop-entity's health - 2
                else if loop-entity's health is less than or equal to 2:
                    set loop-entity's health to loop-entity's health - loop-entity's health + 0.1
                    damage loop-entity by 500 hearts


function energyboom6544844(loc: location): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.5
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    
    loop 2 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 2 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.2 to {_superfkux}

    loop 3 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 4 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.6 to {_superfkux}
    wait 1 tick

    loop 3 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 2 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.5 to {_superfkux}

function energyboom654444(loc: location): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    
    loop 2 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 2 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.1 to {_superfkux}

    loop 3 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 2 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.4 to {_superfkux}
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 2 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.15 to {_superfkux}

function energyboom6544(loc: location): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    
    loop 2 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.1 to {_superfkux}

    loop 5 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.5 to {_superfkux}
    wait 1 tick

    loop 7 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 15 # Set a larger step value here
        set {_iterations} to 24
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.15 to {_superfkux}

function energyboom60999(loc: location): # END ROD FOR 25-40% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.3
    set {_flusyesye} to 20
    
    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.1 to {_superfkux}

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.03 from {_superfkux}

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.1 to {_superfkux}

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.1 from {_superfkux}

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.1 to {_superfkux}
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.03 from {_superfkux}
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.4 ,0.4 ,0.4) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        add 0.15 to {_superfkux}
    wait 1 tick

    loop 6 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        set {_pl} to {_fluxloc}
        set {_step} to 45 # Set a larger step value here
        set {_iterations} to 8
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            draw 5 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} ~ {_v} with offset vector(0.3 ,0.3 ,0.3) with extra 0.000000001 with force
 
        add 0.8 to {_fluxn}
        remove 0.01 from {_superfkux}

function energyboom6099(loc: location): # DUST FOR 45-55% BEAM
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 0.3
    set {_supervectoirvalue} to 0.15
    set {_flusyesye} to 20
    
    loop 49 times:

        
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}

        add 0.01 to {_supervectoirvalue}
        set {_pl} to {_fluxloc}
        set {_step} to 60 # Set a larger step value here
        set {_iterations} to 1
        add 5 to {_flusyesye}
        loop {_iterations} times:
            set {_angle} to loop-value-2 * {_step} + {_flusyesye}
            set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
            loop 10 times:
                draw 4 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 1.5) at {_fluxloc} with offset vector({_supervectoirvalue} ,{_supervectoirvalue} ,{_supervectoirvalue}) with extra 0.000000001 with force

        add 0.8 to {_fluxn}
        add 0.01 to {_superfkux}

function energyboom314dmg(loc: location, p: player): # DUST FOR 56-75% BEAMS
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 70 times:
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        
        add 1 to {_fluxn}
        loop all players in radius 3 of {_fluxloc}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 66 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false

function energyboom314(loc: location, p: player): # DUST FOR 56-75% BEAMS
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 70 times:
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 40 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 2.5) at {_fluxloc} with offset vector(0.5 ,0.5 ,0.5) with extra 0.000000001 with force
        
        add 1 to {_fluxn}

function energyboom3144dmg(loc: location, p: player): # DUST FOR ABOVE 75% BEAMS
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 80 times:
        add 1 to {_fluxn} 
        loop all players in radius 3 of {_fluxloc}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 99 percent of loop-player's health
                    set {-damaged::%loop-player's uuid%} to true

    wait 2 seconds
    loop {_dontdmgagain::*}:
        set {-damaged::%loop-value's uuid%} to false

function energyboom3144(loc: location, p: player): # DUST FOR ABOVE 75% BEAMS
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 80 times:
        loop all entities in radius 5 of {_fluxloc}:
            if loop-entity is not {_p}:
                #damage loop-entity by {-fluxKinetic::%{_p}'s uuid%} percent of loop-entity's health
                damage loop-entity by 99 percent of loop-entity's health
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 40 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 2.5) at {_fluxloc} with offset vector(0.6 ,0.6 ,0.6) with extra 0.000000001 with force
        
        add 1 to {_fluxn}     

function energyboom31444dmg(loc: location, p: player): # DAMAGE FOR ABOVE 75% BEAMS
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 80 times:
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        add 1 to {_fluxn}
        loop all players in radius 3 of {_fluxloc}: 
            if loop-player is not {_p}:
                if loop-player doesn't contain {_dontdmgagain::*}:
                    add loop-player to {_dontdmgagain::*}
                    set {-damaged::%loop-player's uuid%} to true 
                    set {-fluxKiller} to {_p}
                    #damage loop-player by {-fluxKinetic::%{_p}'s uuid%} percent of loop-player's health
                    damage loop-player by 99 percent of loop-player's health
                      

    wait 2 seconds
    loop {_dontdmgagain::*}:
        delete {-fluxKiller}
        set {-damaged::%loop-value's uuid%} to false

function energyboom31444(loc: location, p: player): # DUST FOR ABOVE 75% BEAMS
    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 80 times:
        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 40 of dust_color_transition using dustTransition(rgb(94, 215, 255), rgb(255,255,255), 3.5) at {_fluxloc} with offset vector(0.6 ,0.6 ,0.6) with extra 0.000000001 with force
        
        add 1 to {_fluxn} 

function energyboom3155(loc: location): # END ROD FOR ABOVE 75% BEAMS

    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 250 times:

        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 3 of end_rod at {_fluxloc} with extra 0.03 with force
        
        add 0.3 to {_fluxn}

function energyboom315(loc: location): # END ROD FOR 56-75 BEAMS

    set {_fluxn} to 1
    set {_fluxloc} to {_loc}
    
    loop 230 times:

        set {_fluxloc} to location {_fluxn} metres in front of {_loc}
        
        draw 3 of end_rod at {_fluxloc} with extra 0.03 with force
        
        add 0.3 to {_fluxn}

function energyboom316(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 40 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.11 from {_superfkux}
            wait 1 tick

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.21 to {_superfkux}

function energyboom3166(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 40 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.41 to {_superfkux}
            loop 4 times:


                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            wait 1 tick

function energyboom31766(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 40 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 300 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.41 to {_superfkux}
            loop 4 times:


                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 300 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.2 from {_superfkux}
            wait 1 tick

function energyboom31666(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 60 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 20 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 240 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.21 to {_superfkux}
            loop 4 times:


                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 20 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 240 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.11 from {_superfkux}
            wait 1 tick

function energyboom316666(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 60 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 20 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 60 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.21 to {_superfkux}
            loop 4 times:


                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 20 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 60 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.11 from {_superfkux}
            wait 1 tick

function energyboom317(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2
    loop 60 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}
            wait 1 tick

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.22 to {_superfkux}

function energyboom318(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2.5
    loop 60 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                remove 0.1 from {_superfkux}
            wait 1 tick

            loop 2 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 220 # Set a larger step value here
                set {_iterations} to 2
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 120 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

                add 0.3 to {_fluxn}
                add 0.22 to {_superfkux}

function energyboom1002(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1
    loop 35 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:
            loop 4 times:

                set {_fluxloc} to location {_fluxn} metres in front of {_loc}

                set {_pl} to {_fluxloc}
                set {_step} to 2 # Set a larger step value here
                set {_iterations} to 1
                loop {_iterations} times:
                    set {_angle} to loop-value-3 * {_step} + 30 
                    set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                    draw 1 sonic_boom at {_fluxloc} with extra 0.000000001 with force

                add 0.5 to {_fluxn}
            wait 1 tick

function energyboom500(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.7
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick 

function energyboom501(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.05 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.14 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick 

function energyboom502(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.05 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.14 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

function energyboom503(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.5
    loop 20 times:

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick

function energyboom504(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 1.7
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

function energyboom505(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2.5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick 

function energyboom506(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2.5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.05 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.14 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 240 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick 

function energyboom507(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2.5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.05 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.14 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 20 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 60 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

function energyboom508(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2.5
    loop 20 times:

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 120 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick

function energyboom509(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 2.5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 220 # Set a larger step value here
            set {_iterations} to 2
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 300 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

function energyboom510(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 8
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

function energyboom5102(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 9
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

function energyboom511(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 11
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

function energyboom5112(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 11
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

function energyboom512(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 14
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

function energyboom5132(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 45 # Set a larger step value here
            set {_iterations} to 8
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

function energyboom513(loc: location, p: player):
    set {_fluxn} to 1
    set {_fluxloc} to  {_loc}

    set {_superfkux} to 5
    loop 20 times:
        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.07 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.09 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.11 from {_superfkux}

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.12 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.13 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.1 from {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.08 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.06 from {_superfkux}
       # wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.04 from {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            remove 0.03 from {_superfkux}
        wait 1 tick



        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.05 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.07 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.09 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.11 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.12 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.1 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.08 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.06 to {_superfkux}
        #wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.04 to {_superfkux}
        wait 1 tick

        if {-fluxShootingBeam::%{_p}'s uuid%} is true:

            set {_fluxloc} to location {_fluxn} metres in front of {_loc}

            set {_pl} to {_fluxloc}
            set {_step} to 60 # Set a larger step value here
            set {_iterations} to 6
            loop {_iterations} times:
                set {_angle} to loop-value-2 * {_step} + 30 
                set {_v} to spherical vector radius {_superfkux}, yaw of {_fluxloc} - 90, pitch {_angle}
                draw 1 end_rod at {_pl} ~ {_v} with extra 0.000000001 with force

            add 0.3 to {_fluxn}
            add 0.02 to {_superfkux}
        #wait 1 tick
        
on join:
	set {fluxOverChargeTime.%player's uuid%} to 0
        
on drop:
	if event-item is {Bliss.Flux.T2.%player%}:
		set {-player_dropping::%player%} to true
		if {-fluxchargepercent::%player's uuid%} > 0:
			if {-fluxCharging::%player's uuid%} is not true:
				send "&aCharging started!" to player
				set {-fluxCharging::%player's uuid%} to true
				set {fluxDrop.%player's uuid%} to true
				set {-fluxOvercharging::%player's uuid%} to false
				wait 2 seconds
				set {fluxDrop.%player's uuid%} to false
			else:
				send "&cCharging paused!" to player
				set {-fluxCharging::%player's uuid%} to false
		else:
			send "&cYou don't have enough energy to charge!" to player

command /startcharging:
    permission: op
    trigger:
        if {-fluxchargepercent::%player's uuid%} > 0:
            send "&aCharging started!" to player
            set {-fluxCharging::%player's uuid%} to true
            set {-fluxOvercharging::%player's uuid%} to false
        else:
            send "&cYou don't have enough energy to charge!" to player

command /watts:
    trigger:
        send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player

command /hiddenwatts:
    trigger:
        send "&b🔮 You now have %{-fluxchargeHidden::%player's uuid%}% hidden watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player

command /maxwatts:
    permission: op
    trigger:
        set {-fluxcharge::%player's uuid%} to 2000000
        set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

command /resetwatts:
    permission: op
    trigger:
        set {-fluxcharge::%player's uuid%} to 0
        set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

every 1 second:
	loop all players:
		if loop-player is holding {Bliss.Flux.T2.%loop-player%}:
			if {-fluxCharging::%loop-player's uuid%} is true:
				draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
				draw 4 of smoke at location 1 block above loop-player with offset vector(0.5, 0.5, 0.5) with extra 0 with force
				if {-fluxchargepercent::%loop-player's uuid%} > 0.667:
					if {-fluxKinetic::%loop-player's uuid%} > 100:
						set {fluxOverChargeTime.%loop-player's uuid%} to 3
						set {-fluxOvercharging::%loop-player's uuid%} to true
						set {-fluxCharging::%loop-player's uuid%} to false
						#Overcharge activation
					else:
						set {fluxOverChargeTime.%loop-player's uuid%} to 0
						add 0.667 to {-fluxKinetic::%loop-player's uuid%}
						remove 0.667 from {-fluxchargepercent::%loop-player's uuid%}

				else:
					add {-fluxchargepercent::%loop-player's uuid%} to {-fluxKinetic::%loop-player's uuid%}
					set {-fluxchargepercent::%loop-player's uuid%} to 0
					set {-fluxCharging::%loop-player's uuid%} to false
					set {-fluxcharge::%loop-player's uuid%} to 0
					send "&f🔮 You ran out of watts, your gem is charged at %Format({-fluxKinetic::%loop-player's uuid%})%%%" to loop-player
					if {-fluxKinetic::%loop-player's uuid%} > 100:
						set {-fluxCharging::%loop-player's uuid%} to false
						set {-fluxOvercharging::%loop-player's uuid%} to true
						set {-fluxcharge::%loop-player's uuid%} to 0
		
		if loop-player's off hand item is {Bliss.Flux.T2.%loop-player%}:
			if {-fluxCharging::%loop-player's uuid%} is true:
				draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
				draw 4 of smoke at location 1 block above loop-player with offset vector(0.5, 0.5, 0.5) with extra 0 with force
				if {-fluxchargepercent::%loop-player's uuid%} > 0.667:
					if {-fluxKinetic::%loop-player's uuid%} > 100:
						set {fluxOverChargeTime.%loop-player's uuid%} to 3
						set {-fluxOvercharging::%loop-player's uuid%} to true
						set {-fluxCharging::%loop-player's uuid%} to false

					else:
						set {fluxOverChargeTime.%loop-player's uuid%} to 0
						add 0.667 to {-fluxKinetic::%loop-player's uuid%}
						remove 0.667 from {-fluxchargepercent::%loop-player's uuid%}

				else:
					add {-fluxchargepercent::%loop-player's uuid%} to {-fluxKinetic::%loop-player's uuid%}
					set {-fluxchargepercent::%loop-player's uuid%} to 0
					set {-fluxCharging::%loop-player's uuid%} to false
					set {-fluxcharge::%loop-player's uuid%} to 0
					send "&f🔮 You ran out of watts, your gem is charged at %Format({-fluxKinetic::%loop-player's uuid%})%%%" to loop-player
					if {-fluxKinetic::%loop-player's uuid%} > 100:
						set {-fluxCharging::%loop-player's uuid%} to false
						set {-fluxOvercharging::%loop-player's uuid%} to true
						set {-fluxcharge::%loop-player's uuid%} to 0
        

		if loop-player is not holding {Bliss.Flux.T2.%loop-player%}:
			if loop-player's off hand item is not {Bliss.Flux.T2.%loop-player%}:
				if {-fluxCharging::%loop-player's uuid%} is true:
					if {fluxDrop.%loop-player's uuid%} is not true:
						set {-fluxCharging::%loop-player's uuid%} to false
						send "&cCharging paused!" to loop-player



on death:
    if victim is a player:
        set {-fluxKinetic::%victim's uuid%} to 0
        set {-fluxtrueOvercharging::%victim's uuid%} to false
        set {-fluxCharging::%victim's uuid%} to false

every 1 second:
    loop all players:
        if {-fluxOvercharging::%loop-player's uuid%} is true:
            set {-fluxOvercharging::%loop-player's uuid%} to false
            set {fluxOverChargeTime.%loop-player's uuid%} to 0
            send "&cᴡᴀʀɴɪɴɢ: ᴅᴏ ɴᴏᴛ ʀᴇʟᴇᴀsᴇ ʙᴇᴀᴍ ᴜɴᴛɪʟ 200%%" to loop-player
            draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
            send title "&c&lWARNING" with subtitle "&6Overcharging begins in... 5" to loop-player
            wait 1 second
            draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
            send title "&c&lWARNING" with subtitle "&6Overcharging begins in... 4" to loop-player
            wait 1 second
            draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
            send title "&c&lWARNING" with subtitle "&6Overcharging begins in... 3" to loop-player
            wait 1 second
            draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
            send title "&c&lWARNING" with subtitle "&6Overcharging begins in... 2" to loop-player
            wait 1 second
            draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
            send title "&c&lWARNING" with subtitle "&6Overcharging begins in... 1" to loop-player for 1 second
            wait 1 second
            set {-fluxtrueOvercharging::%loop-player's uuid%} to true
        if {-fluxtrueOvercharging::%loop-player's uuid%} is true:
            if {-fluxKinetic::%loop-player's uuid%} < 199:
                add 0.666666666667 to {-fluxKinetic::%loop-player's uuid%}
                draw 16 of dust using dustOption(rgb(94, 215, 255), 1) at location 1 block above loop-player with offset vector(0.4 ,0.4 ,0.4) with extra 0 with force
                draw 4 of smoke at location 1 block above loop-player with offset vector(0.5, 0.5, 0.5) with extra 0 with force
                if {-fluxKinetic::%loop-player's uuid%} > 101:
                    if {-fluxKinetic::%loop-player's uuid%} < 121:
                        damage loop-player by 1 hearts
                if {-fluxKinetic::%loop-player's uuid%} > 121:
                    if {-fluxKinetic::%loop-player's uuid%} < 140:
                        damage loop-player by 2 hearts
                if {-fluxKinetic::%loop-player's uuid%} > 141:
                    if {-fluxKinetic::%loop-player's uuid%} < 161:
                        damage loop-player by 3 hearts
                if {-fluxKinetic::%loop-player's uuid%} > 161:
                    if {-fluxKinetic::%loop-player's uuid%} < 181:
                        damage loop-player by 4 hearts
                if {-fluxKinetic::%loop-player's uuid%} > 181:
                    if {-fluxKinetic::%loop-player's uuid%} < 201:
                        damage loop-player by 5 hearts
            if {-fluxKinetic::%loop-player's uuid%} >= 199:
                draw 15 of dust using dustOption(rgb(94, 215, 255), 0.8) at location 1 block above loop-player with offset vector(0.4, 0.4, 0.4) with extra 0 with force
                draw 4 of smoke at location 1 block above loop-player with offset vector(0.5, 0.5, 0.5) with extra 0 with force
                damage loop-player by 5 hearts
                set {-fluxKinetic::%loop-player's uuid%} to 200
                set {-fluxcharge::%loop-player's uuid%} to 0
                set {-fluxchargepercent::%loop-player's uuid%} to 0
                

on right click:
    if player's off hand item is {Bliss.Flux.T2.%player%}:
        if {-fluxcharge::%player's uuid%} is set:
            if player's held item is a diamond:
                if {-fluxcharge::%player's uuid%} < 2000000:
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 1928

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 5202 to {-fluxcharge::%player's uuid%}

                    remove 1 of diamond from player's inventory
                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100
                    set {-fluxchargeHidden::%player's uuid%} to {-fluxcharge::%player's uuid%}
                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
            if player's held item is a diamond block:
                if {-fluxcharge::%player's uuid%} < 2000000:
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 17352

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 46819 to {-fluxcharge::%player's uuid%}

                    remove 1 of diamond block from player's inventory
                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100
                    set {-fluxchargeHidden::%player's uuid%} to {-fluxcharge::%player's uuid%}
                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player

            if player's held item is a netherite ingot:
                if {-fluxcharge::%player's uuid%} < 2000000:
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 46819

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 46819 to {-fluxcharge::%player's uuid%}

                    remove 1 of netherite ingot from player's inventory
                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100
                    set {-fluxchargeHidden::%player's uuid%} to {-fluxcharge::%player's uuid%}               
                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player

            if player's held item is a netherite block:
                if {-fluxcharge::%player's uuid%} < 2000000:  # Check if hidden charge is below 2,000,000
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 421378

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 421378 to {-fluxcharge::%player's uuid%}

                    # Remove 1 netherite block from the player's inventory
                    remove 1 of netherite block from player's inventory

                    # Update fluxcharge percent and hidden value
                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

                    # Send feedback to the player
                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
            if player's held item is a copper block:
                if {-fluxcharge::%player's uuid%} < 2000000: 
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 629

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 17352 to {-fluxcharge::%player's uuid%}
                    remove 1 of copper block from player's inventory


                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
            if player's held item is a copper ingot:
                if {-fluxcharge::%player's uuid%} < 2000000: 
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 69

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 1928 to {-fluxcharge::%player's uuid%}
                    remove 1 of copper ingot from player's inventory


                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
            if player's held item is a iron ingot:
                if {-fluxcharge::%player's uuid%} < 2000000: 
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 106

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 106 to {-fluxcharge::%player's uuid%}
                    remove 1 of iron ingot from player's inventory


                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
            if player's held item is a iron block:
                if {-fluxcharge::%player's uuid%} < 2000000: 
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 1067

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 1067 to {-fluxcharge::%player's uuid%}
                    remove 1 of iron block from player's inventory


                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
            if player's held item is a wither skeleton skull:
                if {-fluxcharge::%player's uuid%} < 2000000: 
                    set {_potentialCharge} to {-fluxcharge::%player's uuid%} + 112047

                    if {_potentialCharge} > 2000000:
                        set {_neededCharge} to 2000000 - {-fluxcharge::%player's uuid%}
                        add {_neededCharge} to {-fluxcharge::%player's uuid%}
                    else:
                        add 112047 to {-fluxcharge::%player's uuid%}
                    remove 1 of wither skeleton skull from player's inventory


                    set {-fluxchargepercent::%player's uuid%} to {-fluxcharge::%player's uuid%} / 2000000 * 100

                    send "&f🔮 You now have %{-fluxcharge::%player's uuid%}% watts, up to %Format({-fluxchargepercent::%player's uuid%})%%% charge." to player
                    
        else:
            set {-fluxcharge::%player's uuid%} to 0

on right click:
	if {Tag..%player%} < 1:
		if player's tool is a sword or an axe or air:
			if player's off hand item is {Bliss.Flux.T2.%player%}:
				if {-DoubleClick::%player's uuid%} is not set:
					set {-DoubleClick::%player's uuid%} to true
				else:
					delete {-DoubleClick::%player's uuid%}
					set {_uuid} to uuid of player
					if {flux.cooldown.%player%} is not true:
						set {FluxSec.%player%} to 15
						set {FluxMin.%player%} to 0
						set {flux.cooldown.%player%} to true

						send "&b🔮 You have activated <##FF686F>Kinetic Burst" to player

						set {_fluxholder} to player
						loop all entities within 5 blocks of the player:
							if loop-entity is not {_fluxholder}:
								if {Trusted.%player%.%loop-entity%} is not true:
									set {_direction} to vector between {_fluxholder} and loop-entity
									push loop-entity {_direction} at speed 2
									damage loop-entity by {damage::%player's uuid%} *10 percent of loop-entity's health

						set {_s} to 1
						set {_loc} to player's location
						loop 10 times:

							if loop-value is not 10:
								FluxCircle({_s}, {_loc})
								wait 1 tick
								add 0.5 to {_s}

							else:
								FluxCirclelast({_s}, {_loc})
								set {damage::%player's uuid%} to 0
			else if player's off hand item is {Bliss.Flux.T1.%player%}:
				if {-DoubleClick::%player's uuid%} is not set:
					set {-DoubleClick::%player's uuid%} to true
				else:
					delete {-DoubleClick::%player's uuid%}
					set {_uuid} to uuid of player
					if {flux.cooldown.%player%} is not true:
						set {FluxSec.%player%} to 15
						set {FluxMin.%player%} to 0
						set {flux.cooldown.%player%} to true

						send "&b🔮 You have activated <##FF686F>Kinetic Burst" to player

						set {_fluxholder} to player
						loop all entities within 5 blocks of the player:
							if loop-entity is not {_fluxholder}:
								if {Trusted.%player%.%loop-entity%} is not true:
									set {_direction} to vector between {_fluxholder} and loop-entity
									push loop-entity {_direction} at speed 2
									damage loop-entity by {damage::%player's uuid%} *10 percent of loop-entity's health

						set {_s} to 1
						set {_loc} to player's location
						loop 10 times:

							if loop-value is not 10:
								FluxCircle({_s}, {_loc})
								wait 1 tick
								add 0.5 to {_s}

							else:
								FluxCirclelast({_s}, {_loc})
								set {damage::%player's uuid%} to 0

	   
on damage:
	if attacker is set:
		if {-KinOvALT::%victim's uuid%} is true:
			#loop all players:
				#if attacker is not loop-player:
			if {-KinOvMAIN::%victim's uuid%} is true:
				add 1 to {-KinOvMAINCOUNTER::%victim's uuid%}
				if {-KinOvMAINCOUNTER::%victim's uuid%} is 3:
					send "&7You have &b3 &cATTACK &7points. &7Your next hit will do &b1.1x damage." to victim
				else if {-KinOvMAINCOUNTER::%victim's uuid%} is 6:
					send "&7You have &b6 &cATTACK &7points. &7Your next hit will do &b1.2x damage." to victim
				else if {-KinOvMAINCOUNTER::%victim's uuid%} is 9:
					send "&7You have &b9 &cATTACK &7points. &7Your next hit will do &b1.3x damage." to victim
				else if {-KinOvMAINCOUNTER::%victim's uuid%} is 12:
					send "&7You have &b12 &cATTACK &7points. &7Your next hit will do &b1.4x damage." to victim
				else if {-KinOvMAINCOUNTER::%victim's uuid%} is 15:
					send "&7You have &b15 &cATTACK &7points. &7Your next hit will do &b1.5x damage." to victim

					
on damage:
	if {-KinOvMAIN::%attacker's uuid%} is true:
		if {-KinOvMAINCOUNTER::%attacker's uuid%} is between 3 and 6:
			cancel event
			damage victim by damage * 1.1
			knock victim (vector from attacker to victim) with strength 0.4
			set {-KinOvMAINCOUNTER::%attacker's uuid%} to 0
		if {-KinOvMAINCOUNTER::%attacker's uuid%} is between 6 and 9:
			cancel event
			damage victim by damage * 1.2
			knock victim (vector from attacker to victim) with strength 0.4
			set {-KinOvMAINCOUNTER::%attacker's uuid%} to 0
		if {-KinOvMAINCOUNTER::%attacker's uuid%} is between 9 and 12:
			cancel event
			damage victim by damage * 1.3
			knock victim (vector from attacker to victim) with strength 0.4
			set {-KinOvMAINCOUNTER::%attacker's uuid%} to 0
		if {-KinOvMAINCOUNTER::%attacker's uuid%} is between 12 and 15:
			cancel event
			damage victim by damage * 1.4
			knock victim (vector from attacker to victim) with strength 0.4
			set {-KinOvMAINCOUNTER::%attacker's uuid%} to 0
		if {-KinOvMAINCOUNTER::%attacker's uuid%} is between 15 and 99:
			cancel event
			damage victim by damage * 1.5
			knock victim (vector from attacker to victim) with strength 0.4
			set {-KinOvMAINCOUNTER::%attacker's uuid%} to 0

on break:
	if {-KinOvALT::%player's uuid%} is true:
		loop all players:
			if player is not loop-player:
				if {-KinOvMAIN::%loop-player's uuid%} is true:
					add 1 to {fluxBroken.%loop-player's uuid%}
					if {fluxBroken.%loop-player's uuid%} is 5:
						send "&7You have &b1 &eMINING &7point, giving you Haste level &b1 &7for &b20s&7." to loop-player
						apply haste 1 without particles to loop-player for 20 seconds replacing the existing effect
					if {fluxBroken.%loop-player's uuid%} is 10:
						send "&7You have &b2 &eMINING &7points, giving you Haste level &b2 &7for &b40s&7." to loop-player
						apply haste 2 without particles to loop-player for 40 seconds replacing the existing effect
					if {fluxBroken.%loop-player's uuid%} is 15:
						send "&7You have &b3 &eMINING &7points, giving you Haste level &b3 &7for &b60s&7." to loop-player
						apply haste 3 without particles to loop-player for 60 seconds replacing the existing effect
					if {fluxBroken.%loop-player's uuid%} is 20:
						send "&7You have &b4 &eMINING &7points, giving you Haste level &b4 &7for &b80s&7." to loop-player
						apply haste 4 without particles to loop-player for 80 seconds replacing the existing effect
					if {fluxBroken.%loop-player's uuid%} is 25:
						send "&7You have &b5 &eMINING &7points, giving you Haste level &b5 &7for &b100s&7." to loop-player
						apply haste 5 without particles to loop-player for 100 seconds replacing the existing effect
 
 
on right click on entity:
	if {Tag..%player%} < 1:
		if player is holding {Bliss.Flux.T2.%player%}:
			if {flux.cooldown3.%player%} is not true:
				set {FluxSec3.%player%} to 20
				set {FluxMin3.%player%} to 1
				set {flux.cooldown3.%player%} to true
				set {_loc} to location of player
				send "&b🔮 You have activated Kinetic Overdrive!" to player
				set {-KinOvMAIN::%player's uuid%} to true
				set {-KinOvALT::%target entity's uuid%} to true
				set {-KinOvMAINCOUNTER::%player's uuid%} to 0
				send "&b🔮 You have been affected with %player%'s Kinetic Overdrive!" to target entity
				set {_loc} to location of target entity
				set {_num} to 0.5
				loop 7 times:
					FluxCircleReal({_num}, {_loc})
					add 0.5 to {_num}
					wait 1 tick
				FluxCircleRealLast({_num}, {_loc})
				wait 30 seconds
				set {-KinOvALT::%target entity's uuid%} to false
				set {-KinOvMAIN::%player's uuid%} to false
				delete {-KinOvMAINCOUNTER::%player's uuid%}
				remove haste from the player
				set {fluxBroken.%player's uuid%} to 0			



function FluxCircleReal(s: number, p: entity):
	set {_pl} to location of {_p}
	loop 360 times:
		set {_v} to spherical vector with radius {_s}, yaw loop-value and pitch 0
		make 1 of dust using dustOption(rgb(94, 215, 255), 0.9) at {_pl} ~ {_v} with extra 0 with force
		draw 1 of happy villager at {_pl} ~ {_v} with extra 0 with force

function FluxCircleRealLast(s: number, p: entity):
	set {_pl} to location of {_p}
	loop 10 times:
		loop 360 times:
			set {_v} to spherical vector with radius {_s}, yaw loop-value-2 and pitch 0
			make 1 of dust using dustOption(rgb(94, 215, 255), 0.9) at {_pl} ~ {_v} with extra 0 with force
			draw 1 of happy villager at {_pl} ~ {_v} with extra 0 with force
		wait 0.3 seconds



on damage:
	if {Tag..%attacker%} < 1:
		if attacker is holding {Bliss.Flux.T2.%attacker%}:
			if {flux.cooldown2.%attacker%} is not true:
				set {_uuid} to uuid of attacker
				if attacker is not victim:
					if victim is a player:
						if {Trusted.%attacker%.%victim%} is true:

							send "<##FFD773>🔮 &fYou cannot cast negative powers on allies!" to attacker

						else:
							if victim is invisible:
								send "&b🔮 You have used Ground on <##0EC912>&k???" to attacker
							else:
								send "&b🔮 You have used Ground on <##0EC912>%victim%" to attacker

							if attacker is invisible:
								send "&b🔮 You have been affected with Ground by <##0EC912>&b&k???" to victim
							else:
								send "&b🔮 You have been affected with Ground by <##0EC912>&b%attacker%" to victim


							set {FluxSec2.%attacker%} to 30
							set {FluxMin2.%attacker%} to 0
							set {flux.cooldown2.%attacker%} to true
							set {-fluxKinetic::%attacker's uuid%} to 0
							set {-fluxKiller} to attacker
							set {ground.%victim's uuid%} to true
							damage victim by {-fluxKinetic::%attacker's uuid%} percent of victim's health
							wait 3 seconds
							set {ground.%victim's uuid%} to false
							delete {-fluxKiller}

on player move:
	if {ground.%player's uuid%} is true:
		cancel event

on left click:
	if {Tag..%player%} < 1:
		if player is holding {Bliss.Flux.T2.%player%}:
			if {flux.cooldown2.%player%} is not true:
				#if {-player_dropping::%player%} is not set:
					#if {-invdropping::%player%} is not true:
				set {_uuid} to uuid of player
				set {FluxSec2.%player%} to 30
				set {FluxMin2.%player%} to 0
				set {flux.cooldown2.%player%} to true
				set {-fluxCharging::%player's uuid%} to false
				set {-fluxchargeHidden::%player's uuid%} to 0
				set {-fluxOvercharging::%player's uuid%} to false
				set {-fluxtrueOvercharging::%player's uuid%} to false
				wait 1 tick
				if {-fluxKinetic::%player's uuid%} is 0 or Format(0):
					set {_pl2} to location 1.6 above player
					play sound "entity.zombie_villager.converted" with volume 20 at player
					play sound "block.beacon.power_select" with volume 20 and pitch 1 at player
					play sound "block.beacon.activate" with volume 20 and pitch 2 at player
					play sound "block.respawn_anchor.deplete" with volume 20 and pitch 1 at player
					play sound "block.respawn_anchor.set_spawn" with volume 20 and pitch 1 at player
					play sound "entity.lightning_bolt.thunder" with volume 20 and pitch 0.8 at player
					energyboom651({_pl2}, player)
					loop 6 times:
						energyboom6544844({_pl2})
						wait 3 ticks
				if {-fluxKinetic::%player's uuid%} is between 0.01 and 5: 
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					energyboom659({_pl2}, player)
					loop 6 times:
						energyboom654444({_pl2})
						wait 3 ticks
				if {-fluxKinetic::%player's uuid%} is 5:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					energyboom65444({_pl2}, player)
					loop 6 times:
						energyboom654444({_pl2})
						wait 3 ticks
				if {-fluxKinetic::%player's uuid%} is between 5 and 11:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					energyboom654({_pl2}, player)
					loop 6 times:
						energyboom6544({_pl2})
						wait 3 ticks

				if {-fluxKinetic::%player's uuid%} is between 11 and 20:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					energyboom607({_pl2}, player)
					loop 5 times:
						energyboom6077({_pl2})
						wait 5 ticks

				if {-fluxKinetic::%player's uuid%} is between 20 and 41:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					energyboom609999({_pl2}, player)
					loop 8 times:          
						energyboom60999({_pl2})
						wait 3 ticks

				if {-fluxKinetic::%player's uuid%} is between 41 and 56:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.25 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					energyboom609({_pl2}, player)
					loop 8 times:          
						energyboom6099({_pl2})
						wait 3 ticks

				if {-fluxKinetic::%player's uuid%} is between 56 and 65:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.25 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.6 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					play sound "entity.lightning_bolt.thunder" with volume 20 and pitch 0.8 at player
					set {-fluxShootingBeam::%player's uuid%} to true
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					set {_pl3} to location 2 meters infront and 1.6 above and 3 right of player
					energyboom314dmg({_pl2}, player)
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom316({_pl2}, player)
					energyboom1002({_pl2}, player)
					wait 0.8 seconds
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom317({_pl2}, player)
					energyboom1002({_pl2}, player)
					wait 0.2 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					wait 0.6 seconds
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom318({_pl2}, player)
					energyboom1002({_pl2}, player)
					wait 0.2 seconds
					set {-fluxShootingBeam::%player's uuid%} to false

				if {-fluxKinetic::%player's uuid%} is between 65 and 76:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "entity.warden.sonic_charge" with volume 10 and pitch 1 at player
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 1.3 seconds
					play sound "block.amethyst_block.break" with volume 20 and pitch 1.2 at player
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					energyboom314dmg({_pl2}, player)
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom1002({_pl2}, player)
					energyboom500({_pl2}, player)
					wait 0.5 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					play sound "entity.lightning_bolt.thunder" with volume 20 and pitch 0.8 at player
					set {-fluxShootingBeam::%player's uuid%} to true
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom1002({_pl2}, player)
					wait 0.8 seconds
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom1002({_pl2}, player)
					wait 0.2 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					wait 0.6 seconds
					energyboom314({_pl2}, player)
					energyboom315({_pl2})
					energyboom500({_pl2}, player)
					energyboom1002({_pl2}, player)
					wait 0.2 seconds
					set {-fluxShootingBeam::%player's uuid%} to false

				if {-fluxKinetic::%player's uuid%} is between 76 and 85:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "entity.warden.sonic_charge" with volume 10 and pitch 1 at player
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 1.3 seconds
					play sound "block.amethyst_block.break" with volume 20 and pitch 1.2 at player
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 1 meters infront and 1.6 above player
					energyboom3144dmg({_pl2}, player)
					energyboom3144({_pl2}, player)
					energyboom3155({_pl2})
					energyboom1002({_pl2}, player)

					wait 0.5 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					play sound "entity.lightning_bolt.thunder" with volume 20 and pitch 0.8 at player
					set {-fluxShootingBeam::%player's uuid%} to true
					energyboom3144({_pl2}, player)
					energyboom3155({_pl2})
					energyboom500({_pl2}, player)
					energyboom503({_pl2}, player)
					energyboom504({_pl2}, player)
					energyboom1002({_pl2}, player)

					wait 0.8 seconds
					energyboom3144({_pl2}, player)
					energyboom3155({_pl2})
					energyboom501({_pl2}, player)
					energyboom502({_pl2}, player)
					energyboom1002({_pl2}, player)

					wait 0.2 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player

					wait 0.6 seconds
					energyboom3144({_pl2}, player)
					energyboom3155({_pl2})
					energyboom1002({_pl2}, player)

					wait 0.4 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player

					wait 0.4 seconds
					energyboom3144({_pl2}, player)
					energyboom3155({_pl2})
					energyboom1002({_pl2}, player)
					wait 0.2 seconds
					set {-fluxShootingBeam::%player's uuid%} to false

				if {-fluxKinetic::%player's uuid%} is between 85 and 100.1:
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "entity.warden.sonic_charge" with volume 10 and pitch 1 at player
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 1.3 seconds
					play sound "block.amethyst_block.break" with volume 20 and pitch 1.2 at player
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 2 meters infront and 1.6 above player
					set {_pl3} to location 1.3 meters infront and 1.6 above player
					energyboom31444dmg({_pl2}, player)
					energyboom31444({_pl2}, player)
					energyboom3155({_pl3})
					energyboom1002({_pl2}, player)
					energyboom505({_pl2}, player)

					wait 0.5 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player
					play sound "entity.lightning_bolt.thunder" with volume 20 and pitch 0.8 at player
					set {-fluxShootingBeam::%player's uuid%} to true
					energyboom31444({_pl2}, player)
					energyboom3155({_pl3})
					energyboom1002({_pl2}, player)

					wait 0.8 seconds
					energyboom31444({_pl2}, player)
					energyboom3155({_pl3})
					energyboom505({_pl2}, player)
					energyboom506({_pl2}, player)
					energyboom507({_pl2}, player)
					energyboom508({_pl2}, player)
					energyboom509({_pl2}, player)
					energyboom1002({_pl2}, player)

					wait 0.2 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player

					wait 0.6 seconds
					energyboom31444({_pl2}, player)
					energyboom3155({_pl3})
					energyboom1002({_pl2}, player)
					energyboom505({_pl2}, player)
					energyboom506({_pl2}, player)
					energyboom507({_pl2}, player)

					wait 0.4 seconds
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player

					wait 0.4 seconds
					energyboom31444({_pl2}, player)
					energyboom3155({_pl3})
					energyboom1002({_pl2}, player)
					energyboom508({_pl2}, player)
					energyboom509({_pl2}, player)
					wait 0.2 seconds
					set {-fluxShootingBeam::%player's uuid%} to false

				if {-fluxKinetic::%player's uuid%} is between 100.1 and 199.99:
					set {_s} to 0.5
					set {-fluxKinetic::%player's uuid%} to 0
					#set {_energy} to WhatEnergy(player's held item) - 1
					#SetEnergy(player, {_energy})
					loop 20 times:
						add 0.5 to {_s}
						FluxCircle({_s}, player)
						wait 1 tick

				if {-fluxKinetic::%player's uuid%} is 200:
					set {-fluxShootingBeam::%player's uuid%} to true
					set {-fluxKinetic::%player's uuid%} to 0
					play sound "entity.warden.sonic_charge" with volume 10 and pitch 1 at player
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.5 at player
					wait 0.21 seconds
					play sound "item.axe.scrape" with volume 20 and pitch 0.65 at player
					wait 1.4 seconds
					damage player by 0.001 hearts
					set player's health to 0.1
					play sound "block.amethyst_block.break" with volume 20 and pitch 1.2 at player
					set {_pl} to location 3 meters infront and 1.6 above player
					set {_pl2} to location 2 meters infront and 1.6 above player
					energyboom313({_pl2}, player)
					energyboom312({_pl}, player)
					push player up at speed 2
					push player backwards at speed 4
					wait 0.5 seconds
					energyboom313({_pl2}, player) # END ROD
					energyboom312({_pl}, player) # DUST
					energyboom1001({_pl2}, player) # WARDEN BEAM
					energyboom513({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player
					play sound "entity.warden.sonic_boom" with volume 20 and pitch 1 at player    
					play sound "entity.generic.explode" with volume 20 and pitch 0.75 at player

					wait 0.6 second
					energyboom313({_pl2}, player)
					energyboom312({_pl}, player)
					energyboom1001({_pl2}, player)
					energyboom510({_pl2}, player) # SWAVY END ROD 3
					energyboom5102({_pl2}, player) # SWAVY END ROD 3
					energyboom513({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3


					wait 0.4 second
					play sound "block.beacon.power_select" with volume 20 and pitch 1.6 at player
					play sound "block.beacon.deactivate" with volume 20 and pitch 2 at player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player

					wait 0.2 seconds
					energyboom313({_pl2}, player)
					energyboom312({_pl}, player)
					energyboom1001({_pl2}, player)

					energyboom510({_pl2}, player) # SWAVY END ROD 3
					energyboom5102({_pl2}, player) # SWAVY END ROD 3
					energyboom511({_pl2}, player) # SWAVY END ROD 3
					energyboom5112({_pl2}, player) # SWAVY END ROD 3
					energyboom513({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3


					wait 0.6 seconds
					energyboom313({_pl2}, player)
					energyboom312({_pl}, player)
					energyboom1001({_pl2}, player)
					energyboom510({_pl2}, player) # SWAVY END ROD 
					energyboom5102({_pl2}, player) # SWAVY END ROD 3
					energyboom511({_pl2}, player) # SWAVY END ROD 3
					energyboom5112({_pl2}, player) # SWAVY END ROD 3
					energyboom513({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3

					wait 0.2 seconds

					play sound "block.beacon.power_select" with volume 20 and pitch 1.6 at player
					play sound "block.beacon.deactivate" with volume 20 and pitch 2 at player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player

					wait 0.4 seconds
					energyboom313({_pl2}, player)
					energyboom312({_pl}, player)
					energyboom1001({_pl2}, player)
					energyboom510({_pl2}, player) # SWAVY END ROD 3
					energyboom5102({_pl2}, player) # SWAVY END ROD 3
					energyboom511({_pl2}, player) # SWAVY END ROD 3
					energyboom5112({_pl2}, player) # SWAVY END ROD 3
					energyboom513({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3


					wait 0.6 seconds
					energyboom313({_pl2}, player)
					energyboom312({_pl}, player)
					energyboom1001({_pl2}, player)
					energyboom510({_pl2}, player) # SWAVY END ROD 3
					energyboom5102({_pl2}, player) # SWAVY END ROD 3
					energyboom511({_pl2}, player) # SWAVY END ROD 3
					energyboom5112({_pl2}, player) # SWAVY END ROD 3
					energyboom513({_pl2}, player) # SWAVY END ROD 3
					energyboom5132({_pl2}, player) # SWAVY END ROD 3
					play sound "block.beacon.power_select" with volume 20 and pitch 1.6 at player
					play sound "block.beacon.deactivate" with volume 20 and pitch 2 at player
					play sound "block.beacon.ambient" with volume 50 and pitch 1.6 at player


					wait 0.2 seconds
					set {-fluxShootingBeam::%player's uuid%} to false


		else:
			delete {-player_dropping::%player%}

on join:
	if {-fluxKinetic::%player's uuid%} is not set:
		set {-fluxKinetic::%player's uuid%} to 0

on death of player:
	if {-damaged::%victim's uuid%} is true:
		if victim is invisible:
			if {-fluxKiller} is invisible:
				set death message to "&k??? &fwas obliterated by &k???"
			else:
				set death message to "&k??? &fwas obliterated by %{-fluxKiller}%"
		else:
			if {-fluxKiller} is invisible:
				set death message to "%victim% was obliterated by &k???"
			else:
				set death message to "%victim% was obliterated by %{-fluxKiller}%"

on death of player:
	if {ground.%victim's uuid%} is true:
		if victim is invisible:
			if {-fluxKiller} is invisible:
				set death message to "&k??? &fexperienced high voltage from &k???"
			else:
				set death message to "&k??? &fexperienced high voltage from %{-fluxKiller}%"
		else:
			if {-fluxKiller} is invisible:
				set death message to "%victim% experienced high voltage from &k???"
			else:
				set death message to "%victim% experienced high voltage from %{-fluxKiller}%"


command /resetcharge:
	permission: op
	trigger:
		loop all offlineplayers:
			set {-fluxKinetic::%loop-offlineplayer's uuid%} to 0

function FluxCircle(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})
	

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(94, 215, 255), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force

function FluxCirclelast(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		FluxCircle({_s}, {_pl})
		wait 0.3 seconds

function FluxCircleEXP(s: number, p: player):
	set {_pl} to location of {_p}
	set {_step} to 3 # Set a larger step value here
	set {_iterations} to 360 * {_s} / {_step}
	loop {_iterations} times:
		set {_angle} to loop-value * {_step}
		set {_v} to spherical vector radius {_s}, yaw {_angle}, pitch (0) # Pitch is set to 0 to make it around the {_p}
		draw 1 of happy_villager at {_pl} ~ {_v} with extra 0.000000001 with force



function FluxLine(p: player, e: entity):
	loop 10 times:
		set {_pl} to location of {_p}
		set {_el} to location of {_e}
		set {_v} to vector from {_p}'s head to {_e}'s head
		set vector length of {_v} to 0.1
		set {_loc} to the location 0.7 meters under {_p}'s head
		loop (distance between {_loc} and {_e}) / 0.1 times:
			draw 1 of dust using dustOption(rgb(94, 215, 255), 0.8) at {_loc} with extra 0.000000001 with force
			#draw 1 dust_color_transition using dustTransition(black, black, 0.8) at {_loc} with force
			set {_loc} to {_loc} ~ {_v}
		wait 2 tick


on damage:
	if {Tag..%victim%} < 1:
		if {doubleDamage.%victim's uuid%} is true:
			add damage / 2 to damage 

every 1 seconds:
	loop all players:
		if {-DoubleClick::%loop-player's uuid%} is set:
			delete {-DoubleClick::%loop-player's uuid%}

on damage:
	if victim's off hand item is {Bliss.Flux.T2.%victim%}:
		set {_finaldmg} to final damage / 6
		add {_finaldmg} to {damage::%victim's uuid%}
		set {timesHit::%victim's uuid%} to 0	
		wait 2 minutes
		if {damage::%victim's uuid%} > 0:
			remove {_finaldmg} from {damage::%victim's uuid%}
		else if {damage::%victim's uuid%} < 0:
			set {damage::%victim's uuid%} to 0
	else if victim's off hand item is {Bliss.Flux.T1.%victim%}:
		set {_finaldmg} to final damage / 6
		add {_finaldmg} to {damage::%victim's uuid%}
		set {timesHit::%victim's uuid%} to 0	
		wait 2 minutes
		if {damage::%victim's uuid%} > 0:
			remove {_finaldmg} from {damage::%victim's uuid%}
		else if {damage::%victim's uuid%} < 0:
			set {damage::%victim's uuid%} to 0